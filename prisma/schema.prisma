generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

model Client {
    id        Int       @id @default(autoincrement())
    name      String
    email     String
    phone     String
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    projects  Project[]

    @@map("clients")
}

model Project {
    id          Int             @id @default(autoincrement())
    clientId    Int
    name        String
    address     String
    location    ProjectLocation
    budget      Float
    manager     String
    createdAt   DateTime        @default(now())
    updatedAt   DateTime        @updatedAt
    assignments Assignment[]
    client      Client          @relation(fields: [clientId], references: [id])
    Schedule    Schedule[]

    @@map("projects")
}

model Employee {
    id              Int          @id @default(autoincrement())
    code            String       @unique
    lastName        String
    firstName       String
    fullName        String
    email           String?      @unique
    phone           String
    division        String
    department      String
    currentPosition String
    hireDate        DateTime
    terminationDate DateTime?
    agreementType   String
    workingHours    WorkingHours
    remoteDays      String[]
    createdAt       DateTime     @default(now())
    updatedAt       DateTime?    @db.Timestamptz(6)
    assignments     Assignment[]
    Shift           Shift[]

    @@map("employees")
}

model Schedule {
    id             Int              @id @default(autoincrement())
    projectId      Int
    startDate      DateTime
    endDate        DateTime
    createdAt      DateTime         @default(now())
    updatedAt      DateTime         @updatedAt
    project        Project          @relation(fields: [projectId], references: [id])
    shifts         Shift[]
    WeeklyCapacity WeeklyCapacity[]

    @@map("schedules")
}

model Shift {
    id          Int       @id @default(autoincrement())
    scheduleId  Int
    employeeId  Int
    date        DateTime
    shiftType   ShiftType
    hoursWorked Float
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    employee    Employee  @relation(fields: [employeeId], references: [id])
    schedule    Schedule  @relation(fields: [scheduleId], references: [id])

    @@unique([employeeId, date])
    @@map("shifts")
}

model WeeklyCapacity {
    id            Int      @id @default(autoincrement())
    scheduleId    Int
    weekStartDate DateTime
    weekEndDate   DateTime
    totalHours    Float
    capacity      Float
    budget        Float
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
    schedule      Schedule @relation(fields: [scheduleId], references: [id])

    @@map("weekly_capacities")
}

model Assignment {
    id         Int       @id @default(autoincrement())
    employeeId Int
    projectId  Int
    startDate  DateTime
    endDate    DateTime?
    isActive   Boolean   @default(true)
    role       String?
    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @updatedAt
    employee   Employee  @relation(fields: [employeeId], references: [id])
    project    Project   @relation(fields: [projectId], references: [id])

    @@map("assignments")
}

enum ProjectLocation {
    INSIDE  @map("ΕΝΤΟΣ")
    OUTSIDE @map("ΕΚΤΟΣ")
}

enum AgreementType {
    INDEFINITE @map("Αορίστου")
    DEFINITE   @map("Ορισμένου")
}

enum WorkingHours {
    EIGHT @map("8")
    SIX   @map("6")
    FOUR  @map("4")
}

enum Weekday {
    MONDAY
    TUESDAY
    WEDNESDAY
    THURSDAY
    FRIDAY
}

enum ShiftType {
    EIGHT   @map("8")
    EIGHT_T @map("8T")
    SIX     @map("6")
    SIX_T   @map("6T")
    FOUR    @map("4")
    FOUR_T  @map("4T")
    A
}
